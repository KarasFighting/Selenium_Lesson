  Eclipse中JUint使用步骤 ：

以下步骤环境为Eclipse SDK 3.2.2及JUnit3.8.1 
Ø 新建一个测试用例或选择已有的所想测试的JAVA文件，点击“File->New->…”菜单项或右击文件，在弹出的“New”对话框中选择“JUnit Test Case”，就进入“New JUnit Test Case”对话框 

Ø 在“New JUnit TestCase”对话框填写相应的栏目，主要有Name（测试用例名），SuperClass（若JUnit的版本是3.8.1，则测试的超类一般默认为junit.framework.TestCase；
 若JUnit版本是JUnit 4.4，则默认超类为java.lang.Object。），Class Under Test（被测试的类），Source Folder（测试用例保存的目录），Package（测试用例包名），
 及是否自动生成main，setUp，tearDown方法。在此一般填写NAME及选上复选上setUpt和teardown即可。 

Ø 点击“Next>”按钮，则进入Test Methods，在此你可以直接勾选你想测试的被测试类的方法，Eclipse将自动生成与被选方法相应的测试方法，点击“Fishish”按钮后一个测试用例就创建好了。 

Ø 编写完成测试用例后，点击“Run”按钮就可以看到运行结果了。 

    补充：要使用JUnit，您必须首先将JUnit JAR保存在项目的Build路径上并创建一个测试类。将JUnit保存在项目的Build路径上的步骤为： 

    右击项目—>选择菜单底部的Properties选择Java Build Path—>选择Libraries—>点击Add Variable按钮—>查看已有的列表中有无JUnit文件，
    若没有，则点击Configure Variable—>New按钮，输入JUNIT_LIB作为变量名称，
    编辑该变量并指向解压后的JUnit目录中的一个名为JUnit.jar的文件—>然后在选择刚才添加的jar文件依次点击OK即可。 

  Eclipse中JUnit应用示例 ：

    下面我们作一个在Eclipse中利用JUnit对HelloWorld的测试 测试方法： 
Ø HelloWorld.sayHello()是否执行正常，并且结果也符合要求 
Ø HelloWorld.add()方法是否与我们预期一样执行 

    下一步，我们准备对这两个方法进行测试，确保功能正常。选中HelloWorld.java，右键点击，选择New->JUnit Test Case： 

    进入下面这个页面，在此诸多栏目已经填好，即是这个需要测试的文件的相关信息，若是想在测试完之后即删除测试文件，也可更改路径。
   （本机在Eclipse已有的JUnit3.8.1的基础上又添加了一个新版本JUnit4.4） 

    点击Next进入Test Methods，在此选择所要测试的方法sayHello及add。 

    点击Finish，最后编写完成测试用例代码如下： 

    直接运行Run->Run As->JUnit Test，就可以看到JUnit测试结果： 

    绿色表示测试通过，只要有1个测试未通过，就会显示红色并列出未通过测试的方法。 
    
     
    注：
    JUnit4使用Java5中的注解（annotation），以下是JUnit4常用的几个annotation： 
	@Before：初始化方法   对于每一个测试方法都要执行一次（注意与BeforeClass区别，后者是对于所有方法执行一次）
	@After：释放资源  对于每一个测试方法都要执行一次（注意与AfterClass区别，后者是对于所有方法执行一次）
	@Test：测试方法，在这里可以测试期望异常和超时时间 
	@Test(expected=ArithmeticException.class)检查被测方法是否抛出ArithmeticException异常 
	@Ignore：忽略的测试方法 
	@BeforeClass：针对所有测试，只执行一次，且必须为static void 
	@AfterClass：针对所有测试，只执行一次，且必须为static void 
	一个JUnit4的单元测试用例执行顺序为： 
	@BeforeClass -> @Before -> @Test -> @After -> @AfterClass; 
	
	每一个测试方法的调用顺序为： 
	@Before -> @Test -> @After; 
	
	
	
	
	
	
	
	